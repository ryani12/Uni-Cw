https://mlai.lucid.app/plugin/edit/aiplugin_eb44b07b-72e5-4633-ba54-50462b522351
import yaml
import re
import csv

def regexp_check(data, regexp):
    if regexp:
        return re.match(regexp, data) is not None
    return True

# def load_yaml(yaml_file):
yaml_config_path = 'apexloader.yaml'
with open(yaml_config_path, 'r') as f:
    yamlDict = yaml.safe_load(f)

def generate_insert_statements(csv_file, yaml_config):
    config = yamlDict['TEST']
    test_config = config['LOAD DATA']
    insert_statements = []

    with open(csv_file, newline='') as csvfile:
        data_reader = csv.DictReader(csvfile, delimiter=test_config['SEPARATOR'])
        csv_headers = data_reader.fieldnames
        # print(f"CSV Headers: {csv_headers}")


        yaml_columns = {}
        for col in test_config['COLUMNS']:
            if isinstance(col, dict):
                inner_dict = col.get(next(iter(col)))
                if 'COLNAME' in inner_dict:
                    colname = inner_dict['COLNAME']
                    yaml_columns[colname] = inner_dict
                else:
                    raise ValueError(f"Missing 'COLANME' in column config: {inner_dict}")
            elif isinstance(col, str):
                yaml_columns[col] = {'COLNAME': col}
            else:
                raise ValueError(f"Invalid column format: {col}")

        # print(f"YAML Columns: {list(yaml_columns.keys())}")
        
        for row_number, row in enumerate(data_reader, start=1):
            values_to_insert = []
            try:
                for col_name in csv_headers:
                    col_config = yaml_columns.get(col_name, {})
                    value = row[col_name]
                    regexp = col_config.get('REGEXP', '')
                    if regexp and not regexp_check(value, regexp):
                        raise ValueError(f"Row {row_number}: Data '{value}' does not match the regexp for column {col_name}")
                    if col_config.get('datatype') == 'date':
                        value = f"TO_DATE('{value}', '{col_config['picture']}')"
                    else:
                        value = f"'{value}'"
                    values_to_insert.append(value)

                sql_column_names = ', '.join([yaml_columns[header]['COLNAME'] for header in csv_headers])
                insert_statement = f"INSERT INTO {config['TARGET']['TABLE']} ({sql_column_names}) VALUES ({', '.join(values_to_insert)});"
                insert_statements.append(insert_statement)

            except ValueError as ve:
                print(str(ve))
                break  # stop the process if a regexp check fails
            
    return insert_statements


yaml_config_path = 'apexloader.yaml' 
csv_file_path = 'Test.csv' 
try:
    statements = generate_insert_statements(csv_file_path, yaml_config_path)
    for s in statements:
        print(s)
except Exception as e:
    print(str(e))
